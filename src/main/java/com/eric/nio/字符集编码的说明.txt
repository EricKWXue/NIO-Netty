1.编解码的含义
无论我们往文件中写入什么东西（通常是字符串），真正落实到存储（如：硬盘）中，都是存储的字节数组，因此中间过程需要编解码来实现，最终生成的字节数组都会带着一种编码格式（如：utf-8、gb2312等）
解码：将字节数组转换为字符串。场景：从存储中读出来的
编码：将字符串转换为字节数组。场景：写入存储中

2.一个文件是utf-8格式的，但是我用iso-8859-1读取出来后，再以iso-8859-1写回去。为什么最后打开这个文件内容还是正常的，没有乱码？
详见下面几种编码的解释，可以发现，iso-8859-1是用一个字节表示一个字符的，因为不会出现bit丢失的情况，
假如：
文件中含有“hello你好”5个英文，2个中文字，编码格式为UTF-8（因为一个字节表示一个字符，中文3个字节表示一个汉字）.存储在磁盘中字节数组可能是“hello123890”，其中“123”表示“你”、“890”表示“好”。
当我们从磁盘中以iso-8859-1读取出这个文件，解码出字符数组可能是“helloqweiop”（乱码），再以iso-8859-1把“helloqweiop”（乱码）编码写回去，则硬盘存储的必然又是“hello123890”，因为编解码中间并没有出现bit丢失，导致编解码前后不同。
最后打开这个文件是以utf-8打开的，所以“hello你好”能真是还原出来。

3.几种编码方式的详解
ASCII
特点：7bit表示一个字符，共计可以表示128个字符。（对西方文字来说，足够了。。。但是对中国远远不够啊！）

ISO-8859-1
特点：基于ASCII升级的（因此完全兼容ASCII），8bit（1个字节byte）表示一个字符，共计可以表示256个字符。（对中国、日本等国家还是不够啊！）

gb2312
特点：对所有汉字进行编码，使得每个汉字都有一个特定的表示与之对应，16bit（2个字节byte）表示一个汉字。（但是当时制定gb2312的时候，并没有考虑生僻字，蛋疼！）

gbk
特点：基于gb2312的升级（因此完全兼容gbk），加入了生僻字的编码。（用着用着，发现又不够了）

gb18030
特点：针对中华人民共和国简体汉字表示最全的一种编码

big5
特点：因为中文有繁体形式，所以台湾制定了一种编码格式。（与gbk等完全不兼容）

unicode
特点：国际化标准组织推出来的编码格式，它收集了全世界所有的语言，制定了这个最为全面的编码格式，采用了2个字节byte表示一个字符。（占用存储太大了，对于英美这些国家来说用ASCII足够了，实在没必要用unicode）

UTF（Unicode Translation Format）
特点：如果说unicode是一种编码方式（采用2byte表示一个字符，能表示全世界的语言），UTF更像是一种存储方式：UTF-8是unicode的实现方式之一

UTF-16LE（小端：little endian）、UTF-16BE（大端：big endian）
特点：根据计算机系统字节存储来决定的，如果是从高位开始存，最终到低位，则是大端；如果从低位开始存，最终到高位，则是小端
通常，文件存储有个前缀（实际不存在），0xFEFF（表示BE），0xFFFE（表示LE）

UTF-16
特点：采用2byte表示一个字符

UTF-8
特点：变长字节表示形式，即：根据语言来定到底是用几位来表示，遇到英文就用8bit表示，遇到中文就用24bit（3个字节）表示
BOM（Byte Order Mark）字节序
含义：如果一个文件前缀带有0xFEFF（表示BE），0xFFFE（表示LE），说明是用BOM来标识的，否则就没有用BOM来表示
通常BOM会出现在window系统，而原则上我们根本不要BOM，因为一旦带有BOM，会对文件的解析产生错误（程序可能不会考虑有BOM的情况）

